{"version":3,"sources":["components/Header.js","components/Product.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Component","Product","src","alt","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAsBeA,EApBf,uKAEQ,OAEI,yBAAKC,UAAU,yBACX,uBAAGA,UAAU,eAAeC,KAAK,qDAAjC,uBACA,wBAAID,UAAU,kBACV,wBAAIA,UAAU,UACV,uBAAGC,KAAK,qDAAR,mBAEJ,4BACI,uBAAGA,KAAK,sDAAR,kCAXxB,GAA4BC,aCoBbC,EApBf,uKAEQ,OACI,yBAAKH,UAAU,2CACX,yBAAKA,UAAU,aACX,yBAAKI,IAAI,qEAAqEC,IAAI,aAClF,yBAAKL,UAAU,WACX,6CACA,mDAKJ,4BAAQM,KAAK,SAASN,UAAU,mBAAhC,qBAbpB,GAA6BE,aCoBdK,MAlBf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uCACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,uCACb,kBAAC,EAAD,UCFUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,YDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cf12b375.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            \r\n            <nav className=\"navbar navbar-inverse\">\r\n                <a className=\"navbar-brand\" href=\"https://trinhmaingoc.github.io/lesson02-component\">Bài 2: Component</a>\r\n                <ul className=\"nav navbar-nav\">\r\n                    <li className=\"active\">\r\n                        <a href=\"https://trinhmaingoc.github.io/lesson02-component\">Trang Chủ</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://trinhmaingoc.github.io/lesson01-helloreact\">Bài 01 - Hello React</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class Product extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                <div className=\"thumbnail\">\r\n                    <img src=\"https://product.hstatic.net/1000351627/product/iphone-6-silver.png\" alt=\"Iphone 6\" />\r\n                    <div className=\"caption\">\r\n                        <h3>Iphone 6 Plus</h3>\r\n                        <p>\r\n                            16.000.000 VNĐ\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    <button type=\"button\" className=\"btn btn-success\">Mua Hàng</button>\r\n                </div>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default Product\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Product from './components/Product';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      \n      <div className=\"row\">\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n          <Product />\n        </div>\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n          <Product />\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}